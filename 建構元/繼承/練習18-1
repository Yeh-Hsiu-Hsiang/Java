(1)
以下是已完成的「員工」抽象類別及「全職員工」類別,
請另完成「兼職員工」類別,
「Main」測試類別亦已完成, 無需修改.

//------------------------------------------------------------------------------------------
import java.util.ArrayList;

//員工, 抽象類別
abstract class Employee{
    private String branch;    //部門
    private String name;      //姓名
    private char rank;        //職等   
    
    //建構元(1)
    public Employee(String branch, String name, char rank){
    	setBranch(branch);
    	setName(name);
    	setRank(rank);
    }
    
    //建構元(2)
    public Employee(){
    	setBranch(null);
    	setName(null);
    	setRank('\u0000');
    }
    
    //setters
    public void setBranch(String branch){this.branch=branch;}
    public void setName(String name){this.name=name;}
    public void setRank(char rank){this.rank=rank;}
    
    //getters
    public String getBranch(){return this.branch;}
    public String getName(){return this.name;}
    public char getRank(){return this.rank;}
	
    //列印員工資料,抽象方法
    abstract public void print();
}    


//------------------------------------------------------------------------------------------
//全職員工
class FullTimeEmployee extends Employee{
    private int baseSalary;  //底薪
    private int overHours;   //加班時數
    
    //建構元(1)
    public FullTimeEmployee(String branch, String name, char rank, int baseSalary, int overHours){
    	super(branch, name, rank);
    	setBaseSalary(baseSalary);
    	setOverHours(overHours);
    }    
    
    //建構元(2)
    public FullTimeEmployee(){
    	super();
    	setBaseSalary(0);
    	setOverHours(0);
    }
    
    //setters
    public void setBaseSalary(int baseSalary){this.baseSalary=baseSalary;}
    public void setOverHours(int overHours){this.overHours=overHours;}
    
    //getters
    public int getBaseSalary(){return this.baseSalary;}
    public int getOverHours(){return this.overHours;}
	
    //列印員工資料及薪水
    @Override
    public void print(){
    	System.out.println("部門:" + this.getBranch());  
        System.out.println("員工姓名:" + this.getName()); 
        System.out.println("職等:" + this.getRank());
        System.out.println("底薪:" + this.getBaseSalary()); 
        System.out.println("加班時數:" + this.getOverHours()); 
        
        //每小時加班費150元
        System.out.println("薪水:" + (this.getBaseSalary() + 150*this.getOverHours()));
    }
}



//------------------------------------------------------------------------------------------
//兼職員工
class PartTimeEmployee extends Employee{
    private int hours;   //兼職時數
    
    //建構元(1)
    //建構元(2)
    //setters
    //getters	
    //列印員工資料及薪水
}


//------------------------------------------------------------------------------------------
class Main{
    public static void main(String args[]){
        //一個可放員工物件的串列清單
        ArrayList employee = new ArrayList();
        
        //將多個「全職員工」物件加入串列清單中
        employee.add(new FullTimeEmployee("人事部", "楊小婷", 'A', 45000, 12));
        employee.add(new FullTimeEmployee("人事部", "林小佑", 'A', 48000, 10));
        employee.add(new FullTimeEmployee("會計部", "林小瑜", 'B', 35000, 14));
        employee.add(new FullTimeEmployee("會計部", "林小彤", 'B', 37000, 6));
        employee.add(new FullTimeEmployee("運輸部", "黃小翎", 'C', 36000, 12));        
		

        //將多個「兼職員工」物件加入串列清單中
        employee.add(new PartTimeEmployee("人事部", "李小璋", 'A', 120));
        employee.add(new PartTimeEmployee("會計部", "吳小庭", 'A', 185));
        employee.add(new PartTimeEmployee("運輸部", "林小瑾", 'A', 90));
        employee.add(new PartTimeEmployee("運輸部", "朱小靜", 'B', 125));
        employee.add(new PartTimeEmployee("運輸部", "陳小諼", 'C', 160));        
		
        //印出資料
        for(int i=0; i<employee.size(); i++){
            printEmployee((Employee)employee.get(i));
        }
    }
	
    //印出員工資料
    public static void printEmployee(Employee emp){
        emp.print();
        System.out.println("-------------------------");
    }
}


//------------------------------------------------------------------------------------------


請完成「兼職員工」類別, 列印資訊範例如下:

部門:****
員工姓名:******
職等:**
兼職時數:***
薪水:*******
(「A」職等每小時薪水180元; 「B」職等150元; 其他120元.)



import java.util.ArrayList;

//員工, 抽象類別
abstract class Employee{
    private String branch;    //部門
    private String name;      //姓名
    private char rank;        //職等   
    
    //建構元(1)
    public Employee(String branch, String name, char rank){
    	setBranch(branch);
    	setName(name);
    	setRank(rank);
    }
    
    //建構元(2)
    public Employee(){
    	setBranch(null);
    	setName(null);
    	setRank('\u0000');
    }
    
    //setters
    public void setBranch(String branch){this.branch=branch;}
    public void setName(String name){this.name=name;}
    public void setRank(char rank){this.rank=rank;}
    
    //getters
    public String getBranch(){return this.branch;}
    public String getName(){return this.name;}
    public char getRank(){return this.rank;}
	
    //列印員工資料,抽象方法
    abstract public void print();
}    


//------------------------------------------------------------------------------------------
//全職員工
class FullTimeEmployee extends Employee{
    private int baseSalary;  //底薪
    private int overHours;   //加班時數
    
    //建構元(1)
    public FullTimeEmployee(String branch, String name, char rank, int baseSalary, int overHours){
    	super(branch, name, rank);
    	setBaseSalary(baseSalary);
    	setOverHours(overHours);
    }    
    
    //建構元(2)
    public FullTimeEmployee(){
    	super();
    	setBaseSalary(0);
    	setOverHours(0);
    }
    
    //setters
    public void setBaseSalary(int baseSalary){this.baseSalary=baseSalary;}
    public void setOverHours(int overHours){this.overHours=overHours;}
    
    //getters
    public int getBaseSalary(){return this.baseSalary;}
    public int getOverHours(){return this.overHours;}
	
    //列印員工資料及薪水
    @Override
    public void print(){
    	System.out.println("部門:" + this.getBranch());  
        System.out.println("員工姓名:" + this.getName()); 
        System.out.println("職等:" + this.getRank());
        System.out.println("底薪:" + this.getBaseSalary()); 
        System.out.println("加班時數:" + this.getOverHours()); 
        
        //每小時加班費150元
        System.out.println("薪水:" + (this.getBaseSalary() + 150*this.getOverHours()));
    }
}



//------------------------------------------------------------------------------------------
//兼職員工
class PartTimeEmployee extends Employee{
    private int hours;   //兼職時數

    //建構元(1)
    public PartTimeEmployee(String branch, String name, char rank, int hours){
    	super(branch, name, rank);
    	setHours(hours);
    }    
    
    //建構元(2)
    public PartTimeEmployee(){
    	super();
    	setHours(0);
    }
    
    //setters
    public void setHours(int hours){this.hours=hours;}
    
    //getters
    public int getHours(){return this.hours;}
    
    public int salary(){
    int salary = 0;
    	if (getRank() == 'A'){
		salary = 180;
    	}else if(getRank() == 'B'){
    		salary = 150;
    	}else{
    		salary = 120;
    	}
		return salary * hours;
    }
    
    //列印員工資料及薪水
    @Override
    public void print(){
    	System.out.println("部門:" + this.getBranch());  
        System.out.println("員工姓名:" + this.getName()); 
        System.out.println("兼職時數:" + this.getRank());
        System.out.println("薪水:" + this.salary()); 
    }
}


//------------------------------------------------------------------------------------------
class Main{
    public static void main(String args[]){
        //一個可放員工物件的串列清單
        ArrayList employee = new ArrayList();
        
        //將多個「全職員工」物件加入串列清單中
        employee.add(new FullTimeEmployee("人事部", "楊小婷", 'A', 45000, 12));
        employee.add(new FullTimeEmployee("人事部", "林小佑", 'A', 48000, 10));
        employee.add(new FullTimeEmployee("會計部", "林小瑜", 'B', 35000, 14));
        employee.add(new FullTimeEmployee("會計部", "林小彤", 'B', 37000, 6));
        employee.add(new FullTimeEmployee("運輸部", "黃小翎", 'C', 36000, 12));        
		

        //將多個「兼職員工」物件加入串列清單中
        employee.add(new PartTimeEmployee("人事部", "李小璋", 'A', 120));
        employee.add(new PartTimeEmployee("會計部", "吳小庭", 'A', 185));
        employee.add(new PartTimeEmployee("運輸部", "林小瑾", 'A', 90));
        employee.add(new PartTimeEmployee("運輸部", "朱小靜", 'B', 125));
        employee.add(new PartTimeEmployee("運輸部", "陳小諼", 'C', 160));        
		
        //印出資料
        for(int i=0; i<employee.size(); i++){
            printEmployee((Employee)employee.get(i));
        }
    }
	
    //印出員工資料
    public static void printEmployee(Employee emp){
        emp.print();
        System.out.println("-------------------------");
    }
}

//------------------------------------------------------------------------------------------


